import Head from "next/head";
import Image from "next/image";
import styles from "../styles/Home.module.css";
import { useState } from "react";
import { useForm } from "react-hook-form";


export default function Home() {
  const [ selected, setSelected ] = useState( "высокий" );
  const [ fileSizeInfo, setFileSizeInfo ] = useState( "Не более 10Мб" );
  const [ message, setMessage ] = useState( "" );
  const { handleSubmit, register, reset, formState: { errors } } = useForm( { mode: "onTouched", } );

  const handleChangeRadio = (e) => {
    console.log( e.target.value );
    setSelected(e.target.value )
  };

  const handleChangeFile = (e) => {

    let size = ( e.target.files[ 0 ].size / 1048576 ).toFixed( 2 );

    if( size >= 10 ) {
      setFileSizeInfo( `Размер файла ${ size }Мб превышает 10Мб` );
      e.target.value = "";
    } else {
      setFileSizeInfo( `Размер файла ${ size }Мб` );
    }
  };

  const sendFormHandler = async(data) => {

    const formData = new FormData();
    formData.append( "files", data.file?.[ 0 ] || [] );
    formData.append( "name", data.name );
    formData.append( "email", data.email );
    formData.append( "title", data.title );
    formData.append( "message", data.message );
    formData.append( "priority", data.priority );
    formData.append( "filename", data.file[ 0 ]?.name || "" );

    return await fetch( "api/send-message", {
      method: "POST",
      body: formData,
    } )
      .then( response => {

        if( response.ok ) {
          console.log( response.json() );
          setMessage( "Ваше сообщение отправлено" );
        } else {
          console.log( response.json() );
          setMessage( "Возникла непредвиденная ошибка" );
        }
      } )
      .catch( (err) => {
        console.log( err );
        setMessage( "Что-то пошло не так" );
      } );

  };

  return (
    <div className={ styles.container }>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={ styles.main }>
        <h1 className={ styles[ "form__title" ] }>Напишите нам</h1>
        <form
          id="form"
          onSubmit={ handleSubmit( sendFormHandler ) }
          className={ styles.form }
        >
          <div className={ styles[ "form__field" ] }>
            <label htmlFor="name" className={ styles[ "form__label" ] }>Введите Ваше имя</label>
            <input
              type="text"
              id="name"
              className={ styles[ "form__input" ] }
              autoFocus
              placeholder="Иван"
              { ...register( "name", { required: "Пожалуйста, введите Ваше имя" } ) }
            />
            { errors.name && (
              <p className={ styles[ "form__err" ] }>{ errors.name.message }</p>
            ) }
          </div>
          <div className={ styles[ "form__field" ] }>
            <label htmlFor="email" className={ styles[ "form__label" ] }>Электронная почта</label>
            <input
              type="text"
              id="email"
              className={ styles[ "form__input" ] }
              placeholder="ivan@mail.ru"
              { ...register( "email", {
                required: "Пожалуйста, введите электронную почту",
                pattern: {
                  value: /^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$/i,
                  message: "Пожалуйста, введите корректную электронную почту",
                }
              } ) }
            />
            { errors.email && (
              <p className={ styles[ "form__err" ] }>{ errors.email.message }</p>
            ) }
          </div>
          <div className={ styles[ "form__field" ] }>
            <label htmlFor="title" className={ styles[ "form__label" ] }>Тема сообщения</label>
            <input
              type="text"
              id="title"
              className={ styles[ "form__input" ] }
              placeholder="Заголовок"
              { ...register( "title", { required: "Пожалуйста, введите тему сообщения" } ) }
            />
            { errors.title && (
              <p className={ styles[ "form__err" ] }>{ errors.title.message }</p>
            ) }
          </div>

          <div className={ styles[ "form__field" ] }>
            <label htmlFor="message" className={ styles[ "form__label" ] }>Сообщение</label>
            <textarea
              name="message"
              id="message"
              placeholder="Какое-то сообщение"
              { ...register( "message", {
                required: "Пожалуйста, введите Ваше сообщение",
              } ) }
            />
            { errors.message && (
              <p className={ styles[ "form__err" ] }>{ errors.message.message }</p>
            ) }
          </div>
          <div className={ styles[ "form__field" ] }>
            <label htmlFor="file" className="form__label">Прикрепите файл</label>
            <input
              type="file"
              id="file"
              className="form__input"
              { ...register( "file", {
                required: false,

              } ) }
              onChange={ handleChangeFile }
            />
            <span>{ fileSizeInfo }</span>
          </div>
          <div className={ styles[ "form__field" ] }>
            <p className={ styles[ "form__text" ] }>Выберите приоритет сообщения</p>
            <p>
              <label htmlFor="high" className="form__label">Высокий</label>
              <input
                type="radio"
                id="high"
                value="высокий"
                className="form__input"
                name="priority"
                checked={ selected === "высокий" }
                { ...register( "priority" ) }
                onChange={ handleChangeRadio }
              />
            </p>
            <p>
              <label htmlFor="low" className="form__label">Низкий</label>
              <input
                type="radio"
                id="low"
                className="form__input"
                name="priority"
                value="низкий"
                checked={ selected === "низкий" }
                { ...register( "priority" ) }
                onChange={ handleChangeRadio }
              />
            </p>

          </div>
          <div className={ styles[ "form__field" ] }>
            <button type="submit" className={ styles[ "form__btn" ] }>Отправить</button>
            <button type="reset">Сбросить</button>
          </div>
          {
            message && <div>{ message }</div>
          }
        </form>

      </main>

      <footer className={ styles.footer }>
        Powered by{ " " }
        <span className={ styles.logo }>
            <Image src="/vercel.svg" alt="Vercel Logo" width={ 72 } height={ 16 } />
          </span>
      </footer>
    </div>
  );
}
